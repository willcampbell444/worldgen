#include <groundGen.h>

GroundGen::GroundGen(): randFloats(-1, 1) {}

void GroundGen::generate(int w, float*** adjacent, int x, int y) {
	_width = w;
	_adjacent = adjacent;
	_heightMap = new float*[_width];
	for (int i = 0; i < _width; i++) {
		_heightMap[i] = new float[_width];
	}
	numGenerator.seed(x*100000+y);

	_heightMap[0][0] == randomDisplacement(w);
	_heightMap[_width-1][0] == randomDisplacement(w);
	_heightMap[0][_width-1] == randomDisplacement(w);
	_heightMap[_width-1][_width-1] == randomDisplacement(w);

	if (adjacent[0] != NULL) { // left
		_heightMap[0][0]               = adjacent[0][_width-1][0];
		_heightMap[0][_width-1]        = adjacent[0][_width-1][_width-1];
	}
	if (adjacent[1] != NULL) { // bottom
		_heightMap[0][0]               = adjacent[1][0][_width-1];
		_heightMap[_width-1][0]        = adjacent[1][_width-1][_width-1];
	}
	if (adjacent[2] != NULL) { // right
		_heightMap[_width-1][0]        = adjacent[2][0][0];
		_heightMap[_width-1][_width-1] = adjacent[2][0][_width-1];
	}
	if (adjacent[3] != NULL) { // top
		_heightMap[0][_width-1]        = adjacent[3][0][0];
		_heightMap[_width-1][_width-1] = adjacent[3][_width-1][0];
	}

	int size = _width/2;
	while (size > 0) {
		for (int i = size; i < _width; i += size*2) {
			for (int j = size; j < _width; j += size*2) {
				diamond(i, j, size);
			}
		}
		for (int i = 0; i < _width; i += size) {
			for (int j = (i+size) % (size*2); j <= _width; j += size*2) {
				square(i, j, size);
			}
		}

		size = size/2;
	}
}

void GroundGen::diamond(int centerX, int centerZ, int size) {
	float averageHeight = 0;
	averageHeight += _heightMap[centerX-size][centerZ-size]/4.0f;
	averageHeight += _heightMap[centerX+size][centerZ-size]/4.0f;
	averageHeight += _heightMap[centerX+size][centerZ+size]/4.0f;
	averageHeight += _heightMap[centerX-size][centerZ+size]/4.0f;

	_heightMap[centerX][centerZ] = averageHeight + randomDisplacement(size);
}

void GroundGen::square(int centerX, int centerZ, int size) {
	float averageHeight = 0;
	_fail = 0;
	averageHeight += loopCoord(centerX-size, centerZ);
	averageHeight += loopCoord(centerX+size, centerZ);
	averageHeight += loopCoord(centerX, centerZ+size);
	averageHeight += loopCoord(centerX, centerZ-size);

	_heightMap[centerX][centerZ] = (averageHeight/(4 - _fail)) + randomDisplacement(size/1.5f);
}

int GroundGen::loopCoord(int x, int y) {
	if (x < 0) {
		if (_adjacent[0] != NULL) {
			return _adjacent[0][_width - 2 - x][y];
		}
		_fail += 1;
		return 0.0f;
	} else if (x >= _width) {
		if (_adjacent[2] != NULL) {
			return _adjacent[2][x - _width + 1][y];
		}
		_fail += 1;
		return 0.0f;
	} else if (y < 0) {
		if (_adjacent[1] != NULL) {
			return _adjacent[1][x][_width - 2 - y];
		}
		_fail += 1;
		return 0.0f;
	} else if (y >= _width) {
		if (_adjacent[3] != NULL) {
			return _adjacent[1][x][y - _width + 1];
		}
		_fail += 1;
		return 0.0f;
	}
	return _heightMap[x][y];
}

float GroundGen::randomDisplacement(int size) {
	return randFloats(numGenerator)*size;
}

float GroundGen::getHeight(int x, int z) {
	return _heightMap[x][z];
}

float** GroundGen::getHeightMap() {
	return _heightMap;
}






#ifndef GROUND_GEN_H
#define GROUND_GEN_H

#include <vector>
#include <iostream>
#include <random>
#include <ctime>

class GroundGen{
public:
	// w must be a power of two plus 1
	GroundGen();
	void generate(int w, float*** adjacent, int x, int y);
	int getWidth();
	float getHeight(int x, int z);
	float** getHeightMap();
private:
	void diamond(int centerX, int centerZ, int size);
	void square(int centerX, int centerZ, int size);
	int loopCoord(int c);
	float randomDisplacement(int size);

	float _fail;

	int _width;
	float** _heightMap;

	float*** _adjacent;

	std::default_random_engine numGenerator;
	std::uniform_real_distribution<float> randFloats;
};

#endif